{"ast":null,"code":"var _jsxFileName = \"/home/raisa/carrinho-compras/src/hooks/useCart.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { api } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext({});\nexport function CartProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [cart, setCart] = useState(() => {\n    const storagedCart = localStorage.getItem('@RocketShoes:cart');\n\n    if (storagedCart) {\n      return JSON.parse(storagedCart);\n    }\n\n    return [];\n  });\n\n  const addProduct = async productId => {\n    try {\n      const productAlreadyInCart = cart.find(product => product.id === productId);\n\n      if (!productAlreadyInCart) {\n        const {\n          data: product\n        } = await api.get(`products/${productId}`);\n        const {\n          data: stock\n        } = await api.get(`stock/${productId}`);\n\n        if (stock.amount > 0) {\n          setCart([...cart, { ...product,\n            amount: 1\n          }]);\n          localStorage.setItem('@RocketShoes:cart', JSON.stringify([...cart, { ...product,\n            amount: 1\n          }]));\n          return;\n        }\n      }\n\n      if (productAlreadyInCart) {\n        const {\n          data: stock\n        } = await api.get(`stock/${productId}`);\n\n        if (stock.amount > productAlreadyInCart.amount) {\n          const updateCart = cart.map(cartItem => cartItem.id === productId ? { ...cartItem,\n            amount: Number(cartItem.amount) + 1\n          } : cartItem);\n          setCart(updateCart);\n          localStorage.setItem('@RocketShoes:cart', JSON.stringify(updateCart));\n          toast('Adicionado');\n          return;\n        } else {\n          toast.error('Quantidade solicitada fora do estoque');\n        }\n      } // const data = await api.get(`products/${productId}`)      \n      // setCart([...cart,data.data]);\n\n    } catch {\n      toast.error('Erro na adição do produto');\n    }\n  };\n\n  const removeProduct = productId => {\n    try {// TODO\n    } catch {// TODO\n    }\n  }; // const updatedAmountCartProduct = cart.map(product => {\n  //   return product.id === productId \n  //     ? {...product, amount: productAmount + 1 } \n  //     : product;\n  // });\n\n\n  const updateProductAmount = async _ref2 => {\n    let {\n      productId,\n      amount\n    } = _ref2;\n\n    try {} catch {}\n  };\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      addProduct,\n      removeProduct,\n      updateProductAmount\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CartProvider, \"yuvwwZIsxrDpvj1ES9WkyhAC5Ms=\");\n\n_c = CartProvider;\nexport function useCart() {\n  _s2();\n\n  const context = useContext(CartContext);\n  return context;\n}\n\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/home/raisa/carrinho-compras/src/hooks/useCart.tsx"],"names":["createContext","useContext","useState","toast","api","CartContext","CartProvider","children","cart","setCart","storagedCart","localStorage","getItem","JSON","parse","addProduct","productId","productAlreadyInCart","find","product","id","data","get","stock","amount","setItem","stringify","updateCart","map","cartItem","Number","error","removeProduct","updateProductAmount","useCart","context"],"mappings":"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","sourcesContent":["import { createContext, ReactNode, useContext, useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport { ProductList } from '../pages/Home/styles';\nimport { api } from '../services/api';\nimport { Product, Stock } from '../types';\n\ninterface CartProviderProps {\n  children: ReactNode;\n}\n\ninterface UpdateProductAmount {\n  productId: number;\n  amount: number;\n}\n\ninterface CartContextData {\n  cart: Product[];\n  addProduct: (productId: number) => Promise<void>;\n  removeProduct: (productId: number) => void;\n  updateProductAmount: ({ productId, amount }: UpdateProductAmount) => void;\n}\n\nconst CartContext = createContext<CartContextData>({} as CartContextData);\n\nexport function CartProvider({ children }: CartProviderProps): JSX.Element {\n  const [cart, setCart] = useState<Product[]>(() => {\n    const storagedCart = localStorage.getItem('@RocketShoes:cart')\n\n    if (storagedCart) {\n      return JSON.parse(storagedCart);\n    }\n\n    return [];\n  });\n\n  const addProduct = async (productId: number) => {\n    try {\n        const productAlreadyInCart = cart.find(product => product.id === productId);\n\n        if(!productAlreadyInCart){\n          const {data: product} = await api.get<Product>(`products/${productId}`)\n          const{data: stock} = await api.get<Stock>(`stock/${productId}`)\n\n          if(stock.amount > 0){\n            setCart([...cart, {...product, amount:1}])\n            localStorage.setItem('@RocketShoes:cart',JSON.stringify([...cart,{...product, amount:1}]))\n            return;\n          }\n        }\n\n        if(productAlreadyInCart){\n          const {data:stock} = await api.get(`stock/${productId}`)\n\n          if(stock.amount > productAlreadyInCart.amount){\n            const updateCart = cart.map(cartItem => cartItem.id === productId ? {\n              ...cartItem,\n              amount: Number(cartItem.amount) + 1\n            } : cartItem)\n\n            setCart(updateCart)\n            localStorage.setItem('@RocketShoes:cart', JSON.stringify(updateCart))\n            toast ('Adicionado')\n            return;\n          }else{\n            toast.error('Quantidade solicitada fora do estoque')\n          }\n\n        }\n\n\n      // const data = await api.get(`products/${productId}`)      \n      // setCart([...cart,data.data]);\n      \n    } catch {\n\n      toast.error('Erro na adição do produto')\n    }\n  };\n\n  const removeProduct = (productId: number) => {\n    try {\n      // TODO\n    } catch {\n      // TODO\n    }\n  };\n\n  // const updatedAmountCartProduct = cart.map(product => {\n  //   return product.id === productId \n  //     ? {...product, amount: productAmount + 1 } \n  //     : product;\n  // });\n\n  const updateProductAmount = async ({\n    productId,\n    amount,\n  }: UpdateProductAmount) => {\n    try {\n      \n    } catch {\n   \n    }\n  };\n\n  return (\n    <CartContext.Provider\n      value={{ cart, addProduct, removeProduct, updateProductAmount }}\n    >\n      {children}\n    </CartContext.Provider>\n  );\n}\n\nexport function useCart(): CartContextData {\n  const context = useContext(CartContext);\n\n  return context;\n}\n"]},"metadata":{},"sourceType":"module"}